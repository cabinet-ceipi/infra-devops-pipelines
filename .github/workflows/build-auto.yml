name: 🐳 Docker Build & Deploy (Auto)

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      context:
        required: true
        type: string
    secrets:
      GITHUB_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Generate tags (main→latest, release→release)
        id: tags
        run: |
          BRANCH_NAME="${{ github.ref_name }}"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          elif [[ "$BRANCH_NAME" == "release" ]]; then
            TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:release"
          else
            echo "Branch $BRANCH_NAME non autorisée."
            exit 1
          fi

          echo "tags=$TAG" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "short_sha=$(echo "${{ github.sha }}" | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "full_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: 📄 Copy .env.devops to .env
        run: |
          if [ -f .env.devops ]; then
            cp .env.devops .env
            echo ".env.devops copied to .env"
          else
            echo "No .env.devops file found, skipping copy."
          fi

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📝 Output image info
        run: |
          echo "🐳 Image construite et poussée :"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Repository: ${{ env.IMAGE_NAME }}"
          echo "Tag: ${{ steps.tags.outputs.tags }}"
          echo "Branch: ${{ steps.tags.outputs.branch_name }}"
          echo "Commit: ${{ steps.tags.outputs.short_sha }}"
