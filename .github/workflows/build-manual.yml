name: 🐳 Manual Docker Build (comment-triggered DEV+PROD)

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      context:
        required: true
        type: string
    secrets:
      GITHUB_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build-dev-on-comment:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: read

    # Ne tourne que si le commentaire est posté sur une Pull Request
    if: ${{ github.event.issue.pull_request }}

    steps:
      - name: 🔍 Vérifier le trigger 'build=docker'
        id: check-trigger
        run: |
          COMMENT="${{ github.event.comment.body }}"
          if [[ "$COMMENT" == *"build=docker"* ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: ⏭️ Skip (pas de trigger)
        if: steps.check-trigger.outputs.should_build != 'true'
        run: |
          echo "Build ignoré : ajoute 'build=docker' dans un commentaire de cette PR pour lancer le build."

      - name: 📥 Checkout HEAD de la branche source (PR)
        if: steps.check-trigger.outputs.should_build == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: 🐳 Set up Docker Buildx
        if: steps.check-trigger.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login GHCR
        if: steps.check-trigger.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Générer le tag basé sur la branche
        if: steps.check-trigger.outputs.should_build == 'true'
        id: tags
        run: |
          IMAGE_NAME_LOWER="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          BRANCH="${{ github.event.pull_request.head.ref }}"
          CLEAN_BRANCH="$(echo "$BRANCH" | sed 's#[/ ]#-#g' | tr '[:upper:]' '[:lower:]')"
          
          PROD_TAG="${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${CLEAN_BRANCH}"

          echo "image_repo=${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}" >> $GITHUB_OUTPUT
          echo "branch=${CLEAN_BRANCH}" >> $GITHUB_OUTPUT
          echo "prod_tag=${PROD_TAG}" >> $GITHUB_OUTPUT

      # ----- PROD -----
      - name: 📄 Copier .env.devops -> .env (PROD)
        if: steps.check-trigger.outputs.should_build == 'true'
        run: cp .env.devops .env

      - name: 🏗️ Build & push PROD (Dockerfile)
        if: steps.check-trigger.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.prod_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📝 Sortie
        if: steps.check-trigger.outputs.should_build == 'true'
        run: |
          echo "Registry : ${{ env.REGISTRY }}"
          echo "Repo     : ${{ steps.tags.outputs.image_repo }}"
          echo "Branche  : ${{ steps.tags.outputs.branch }}"
          echo "Tag PROD : ${{ steps.tags.outputs.prod_tag }}"
